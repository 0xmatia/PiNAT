import subprocess
from time import sleep

def _get_interface():
    """
    Returns a valid interface name
    """
    proc = subprocess.Popen(["nmcli", "-f", "DEVICE", "device"], stdout=subprocess.PIPE)
    (available_adapters, _) = proc.communicate()

    wifi_adapter = input("Wifi interface name: ")
    etherent_adapter = input("Ethernet interface name: ")

    # # Does the adapter exists?
    if wifi_adapter + " " not in available_adapters.decode() or \
        etherent_adapter + " " not in available_adapters.decode():
            raise Exception("One of the specified adapters doesn't exist")
    
    return wifi_adapter, etherent_adapter


def _get_password():
    """
    Returns a valid WPA2 password
    """
    passphrase = input("Wifi password: ")
    if len(passphrase) > 63 or len(passphrase) < 8:
        raise Exception("Invalid WPA2 password. Password must be 8-63 chars long.")
  
    return passphrase



def _get_ssid():
    """
    Returns a valid SSID
    """
    ssid = input("Wifi Name: ")
    if len(ssid) > 32 or len(ssid) < 1 or '|' in ssid:
        raise Exception("Invalid SSID.")

    return ssid


def _turn_on(wifi_adapter, etherent_adapter, ssid, password):
    """
    Turns hotspot on
    """

    # for debug, comment out the stdout redirect
    subprocess.Popen(["create_ap", "-m", "bridge", wifi_adapter, etherent_adapter, \
        ssid, password, "--daemon"], stdout=subprocess.DEVNULL)

    sleep(6) #how to get rid of it
    create_new = False
    with open("/etc/iproute2/rt_tables", "r") as tables_file:
        if "24\tpinat\n" not in tables_file.readlines():
            create_new = True
    if create_new:
        with open("/etc/iproute2/rt_tables", "a") as tables_file:
            tables_file.write("\n# the next table was generated by PiNAT\n")
            tables_file.write("24\tpinat\n")

    subprocess.Popen(["ip", "rule", "add", "iif", wifi_adapter, \
        "table", "pinat"], stdout=subprocess.DEVNULL).wait()

    subprocess.Popen(["ip", "route", "replace", "to", "blackhole", \
        "default", "table", "pinat"], stdout=subprocess.DEVNULL).wait()

    print("Hotspot has been activated")

def cleanup(interface):
    """ 
    Turns off the hotspot if neccessry
    """
    subprocess.Popen(["create_ap", "--stop", interface]).wait()
    print("Hotspot deactivated")

    subprocess.Popen(["ip", "rule", "del", "table", "pinat"], stdout=subprocess.DEVNULL).wait()


def init_hotspot():
    wifi_adapter, eth_adapter = _get_interface()
    ssid = _get_ssid()
    password = _get_password()
    # Start hotspot:
    _turn_on(wifi_adapter, eth_adapter, ssid, password)
    return wifi_adapter #the wifi adapter is the one we are interested in!
